<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\ArgumentsRequired;
use \ccxt\InvalidAddress;
use \ccxt\InvalidOrder;

class okex5 extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe (), array(
            'id' => 'okex5',
            'name' => 'OKEX',
            'countries' => array( 'CN', 'US' ),
            'version' => 'v5',
            'rateLimit' => 1000, // up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
            'has' => array(
                'CORS' => false,
                'cancelOrder' => true,
                'createOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => false, // see below
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPosition' => true,
                'fetchPositions' => true,
                'fetchStatus' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchWithdrawals' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1H',
                '2h' => '2H',
                '4h' => '4H',
                '6h' => '6H',
                '12h' => '12H',
                '1d' => '1D',
                '1w' => '1W',
                '1M' => '1M',
                '3M' => '3M',
                '6M' => '6M',
                '1y' => '1Y',
            ),
            'hostname' => 'www.okex.com',
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/32552768-0d6dd3c6-c4a6-11e7-90f8-c043b64756a7.jpg',
                'api' => array(
                    'rest' => 'https://{hostname}',
                ),
                'www' => 'https://www.okex.com',
                'doc' => 'https://www.okex.com/docs/en/',
                'fees' => 'https://www.okex.com/pages/products/fees.html',
                'referral' => 'https://www.okex.com/join/1888677',
                'test' => array(
                    'rest' => 'https://testnet.okex.com',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'market/tickers',
                        'market/ticker',
                        'market/index-tickers',
                        'market/books',
                        'market/candles',
                        'market/history-candles',
                        'market/index-candles',
                        'market/mark-price-candles',
                        'market/trades',
                        'market/platform-24-volume',
                        'market/oracle',
                        'public/instruments',
                        'public/delivery-exercise-history',
                        'public/open-interest',
                        'public/funding-rate',
                        'public/funding-rate-history',
                        'public/price-limit',
                        'public/opt-summary',
                        'public/estimated-price',
                        'public/discount-rate-interest-free-quota',
                        'public/time',
                        'public/liquidation-orders',
                        'public/mark-price',
                        'public/tier',
                        'system/status',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account/account-position-risk',
                        'account/balance',
                        'account/positions',
                        'account/bills',
                        'account/bills-archive',
                        'account/config',
                        'account/max-size',
                        'account/max-avail-size',
                        'account/leverage-info',
                        'account/max-loan',
                        'account/trade-fee',
                        'account/interest-accrued',
                        'account/interest-rate',
                        'account/max-withdrawal',
                        'asset/deposit-address',
                        'asset/balances',
                        'asset/deposit-history',
                        'asset/withdrawal-history',
                        'asset/currencies',
                        'asset/bills',
                        'trade/order',
                        'trade/orders-pending',
                        'trade/orders-history',
                        'trade/orders-history-archive',
                        'trade/fills',
                        'trade/orders-algo-pending',
                        'trade/orders-algo-history',
                        'account/subaccount/balances',
                        'asset/subaccount/bills',
                        'users/subaccount/list',
                    ),
                    'post' => array(
                        'account/set-position-mode',
                        'account/set-leverage',
                        'account/position/margin-balance',
                        'account/set-greeks',
                        'asset/transfer',
                        'asset/withdrawal',
                        'asset/purchase_redempt',
                        'trade/order',
                        'trade/batch-orders',
                        'trade/cancel-order',
                        'trade/cancel-batch-orders',
                        'trade/amend-order',
                        'trade/amend-batch-orders',
                        'trade/close-position',
                        'trade/order-algo',
                        'trade/cancel-algos',
                        'users/subaccount/delete-apikey',
                        'users/subaccount/modify-apikey',
                        'users/subaccount/apikey',
                        'asset/subaccount/transfer',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'taker' => 0.0015,
                    'maker' => 0.0010,
                ),
                'spot' => array(
                    'taker' => 0.0015,
                    'maker' => 0.0010,
                ),
                'futures' => array(
                    'taker' => 0.0005,
                    'maker' => 0.0002,
                ),
                'swap' => array(
                    'taker' => 0.00050,
                    'maker' => 0.00020,
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
                'password' => true,
            ),
            'exceptions' => array(
                'exact' => array(
                    // Public error codes from 50000-53999
                    // General Class
                    '1' => '\\ccxt\\ExchangeError', // Operation failed
                    '2' => '\\ccxt\\ExchangeError', // Bulk operation partially succeeded
                    '50000' => '\\ccxt\\BadRequest', // Body can not be empty
                    '50001' => '\\ccxt\\OnMaintenance', // Matching engine upgrading. Please try again later
                    '50002' => '\\ccxt\\BadRequest', // Json data format error
                    '50004' => '\\ccxt\\RequestTimeout', // Endpoint request timeout (does not indicate success or failure of order, please check order status)
                    '50005' => '\\ccxt\\ExchangeNotAvailable', // API is offline or unavailable
                    '50006' => '\\ccxt\\BadRequest', // Invalid Content_Type, please use "application/json" format
                    '50007' => '\\ccxt\\AccountSuspended', // Account blocked
                    '50008' => '\\ccxt\\AuthenticationError', // User does not exist
                    '50009' => '\\ccxt\\AccountSuspended', // Account is suspended due to ongoing liquidation
                    '50010' => '\\ccxt\\ExchangeError', // User ID can not be empty
                    '50011' => '\\ccxt\\RateLimitExceeded', // Request too frequent
                    '50012' => '\\ccxt\\ExchangeError', // Account status invalid
                    '50013' => '\\ccxt\\ExchangeNotAvailable', // System is busy, please try again later
                    '50014' => '\\ccxt\\ExchangeError', // Parameter {0} can not be empty
                    '50015' => '\\ccxt\\ExchangeError', // Either parameter {0} or {1} is required
                    '50016' => '\\ccxt\\ExchangeError', // Parameter {0} does not match parameter {1}
                    '50017' => '\\ccxt\\ExchangeError', // The position is frozen due to ADL. Operation restricted
                    '50018' => '\\ccxt\\ExchangeError', // Currency {0} is frozen due to ADL. Operation restricted
                    '50019' => '\\ccxt\\ExchangeError', // The account is frozen due to ADL. Operation restricted
                    '50020' => '\\ccxt\\ExchangeError', // The position is frozen due to liquidation. Operation restricted
                    '50021' => '\\ccxt\\ExchangeError', // Currency {0} is frozen due to liquidation. Operation restricted
                    '50022' => '\\ccxt\\ExchangeError', // The account is frozen due to liquidation. Operation restricted
                    '50023' => '\\ccxt\\ExchangeError', // Funding fee frozen. Operation restricted
                    '50024' => '\\ccxt\\ExchangeError', // Parameter {0} and {1} can not exist at the same time
                    '50025' => '\\ccxt\\ExchangeError', // Parameter {0} count exceeds the limit {1}
                    '50026' => '\\ccxt\\ExchangeError', // System error
                    '50027' => '\\ccxt\\ExchangeError', // The account is restricted from trading
                    '50028' => '\\ccxt\\ExchangeError', // Unable to take the order, please reach out to support center for details
                    // API Class
                    '50100' => '\\ccxt\\ExchangeError', // API frozen, please contact customer service
                    '50101' => '\\ccxt\\ExchangeError', // Broker id of APIKey does not match current environment
                    '50102' => '\\ccxt\\InvalidNonce', // Timestamp request expired
                    '50103' => '\\ccxt\\AuthenticationError', // Request header "OK_ACCESS_KEY" can not be empty
                    '50104' => '\\ccxt\\AuthenticationError', // Request header "OK_ACCESS_PASSPHRASE" can not be empty
                    '50105' => '\\ccxt\\AuthenticationError', // Request header "OK_ACCESS_PASSPHRASE" incorrect
                    '50106' => '\\ccxt\\AuthenticationError', // Request header "OK_ACCESS_SIGN" can not be empty
                    '50107' => '\\ccxt\\AuthenticationError', // Request header "OK_ACCESS_TIMESTAMP" can not be empty
                    '50108' => '\\ccxt\\ExchangeError', // Exchange ID does not exist
                    '50109' => '\\ccxt\\ExchangeError', // Exchange domain does not exist
                    '50110' => '\\ccxt\\PermissionDenied', // Invalid IP
                    '50111' => '\\ccxt\\AuthenticationError', // Invalid OK_ACCESS_KEY
                    '50112' => '\\ccxt\\AuthenticationError', // Invalid OK_ACCESS_TIMESTAMP
                    '50113' => '\\ccxt\\AuthenticationError', // Invalid signature
                    '50114' => '\\ccxt\\AuthenticationError', // Invalid authorization
                    '50115' => '\\ccxt\\BadRequest', // Invalid request method
                    // Trade Class
                    '51000' => '\\ccxt\\BadRequest', // Parameter {0} error
                    '51001' => '\\ccxt\\BadSymbol', // Instrument ID does not exist
                    '51002' => '\\ccxt\\BadSymbol', // Instrument ID does not match underlying index
                    '51003' => '\\ccxt\\BadRequest', // Either client order ID or order ID is required
                    '51004' => '\\ccxt\\InvalidOrder', // Order amount exceeds current tier limit
                    '51005' => '\\ccxt\\InvalidOrder', // Order amount exceeds the limit
                    '51006' => '\\ccxt\\InvalidOrder', // Order price out of the limit
                    '51007' => '\\ccxt\\InvalidOrder', // Order placement failed. Order amount should be at least 1 contract (showing up when placing an order with less than 1 contract)
                    '51008' => '\\ccxt\\InsufficientFunds', // Order placement failed due to insufficient balance
                    '51009' => '\\ccxt\\AccountSuspended', // Order placement function is blocked by the platform
                    '51010' => '\\ccxt\\InsufficientFunds', // Account level too low
                    '51011' => '\\ccxt\\InvalidOrder', // Duplicated order ID
                    '51012' => '\\ccxt\\ExchangeError', // Token does not exist
                    '51014' => '\\ccxt\\ExchangeError', // Index does not exist
                    '51015' => '\\ccxt\\BadSymbol', // Instrument ID does not match instrument type
                    '51016' => '\\ccxt\\InvalidOrder', // Duplicated client order ID
                    '51017' => '\\ccxt\\ExchangeError', // Borrow amount exceeds the limit
                    '51018' => '\\ccxt\\ExchangeError', // User with option account can not hold net short positions
                    '51019' => '\\ccxt\\ExchangeError', // No net long positions can be held under isolated margin mode in options
                    '51020' => '\\ccxt\\InvalidOrder', // Order amount should be greater than the min available amount
                    '51021' => '\\ccxt\\BadSymbol', // Contract to be listed
                    '51022' => '\\ccxt\\BadSymbol', // Contract suspended
                    '51023' => '\\ccxt\\ExchangeError', // Position does not exist
                    '51024' => '\\ccxt\\AccountSuspended', // Unified accountblocked
                    '51025' => '\\ccxt\\ExchangeError', // Order count exceeds the limit
                    '51026' => '\\ccxt\\BadSymbol', // Instrument type does not match underlying index
                    '51027' => '\\ccxt\\BadSymbol', // Contract expired
                    '51028' => '\\ccxt\\BadSymbol', // Contract under delivery
                    '51029' => '\\ccxt\\BadSymbol', // Contract is being settled
                    '51030' => '\\ccxt\\BadSymbol', // Funding fee is being settled
                    '51031' => '\\ccxt\\InvalidOrder', // This order price is not within the closing price range
                    '51100' => '\\ccxt\\InvalidOrder', // Trading amount does not meet the min tradable amount
                    '51101' => '\\ccxt\\InvalidOrder', // Entered amount exceeds the max pending order amount (Cont) per transaction
                    '51102' => '\\ccxt\\InvalidOrder', // Entered amount exceeds the max pending count
                    '51103' => '\\ccxt\\InvalidOrder', // Entered amount exceeds the max pending order count of the underlying asset
                    '51104' => '\\ccxt\\InvalidOrder', // Entered amount exceeds the max pending order amount (Cont) of the underlying asset
                    '51105' => '\\ccxt\\InvalidOrder', // Entered amount exceeds the max order amount (Cont) of the contract
                    '51106' => '\\ccxt\\InvalidOrder', // Entered amount exceeds the max order amount (Cont) of the underlying asset
                    '51107' => '\\ccxt\\InvalidOrder', // Entered amount exceeds the max holding amount (Cont)
                    '51108' => '\\ccxt\\InvalidOrder', // Positions exceed the limit for closing out with the market price
                    '51109' => '\\ccxt\\InvalidOrder', // No available offer
                    '51110' => '\\ccxt\\InvalidOrder', // You can only place a limit order after Call Auction has started
                    '51111' => '\\ccxt\\BadRequest', // Maximum {0} orders can be placed in bulk
                    '51112' => '\\ccxt\\InvalidOrder', // Close order size exceeds your available size
                    '51113' => '\\ccxt\\RateLimitExceeded', // Market-price liquidation requests too frequent
                    '51115' => '\\ccxt\\InvalidOrder', // Cancel all pending close-orders before liquidation
                    '51116' => '\\ccxt\\InvalidOrder', // Order price or trigger price exceeds {0}
                    '51117' => '\\ccxt\\InvalidOrder', // Pending close-orders count exceeds limit
                    '51118' => '\\ccxt\\InvalidOrder', // Total amount should exceed the min amount per order
                    '51119' => '\\ccxt\\InsufficientFunds', // Order placement failed due to insufficient balance
                    '51120' => '\\ccxt\\InvalidOrder', // Order quantity is less than {0}, please try again
                    '51121' => '\\ccxt\\InvalidOrder', // Order count should be the integer multiples of the lot size
                    '51122' => '\\ccxt\\InvalidOrder', // Order price should be higher than the min price {0}
                    '51124' => '\\ccxt\\InvalidOrder', // You can only place limit orders during call auction
                    '51125' => '\\ccxt\\InvalidOrder', // Currently there are reduce . reverse position pending orders in margin trading. Please cancel all reduce . reverse position pending orders and continue
                    '51126' => '\\ccxt\\InvalidOrder', // Currently there are reduce only pending orders in margin trading.Please cancel all reduce only pending orders and continue
                    '51127' => '\\ccxt\\InsufficientFunds', // Available balance is 0
                    '51128' => '\\ccxt\\InvalidOrder', // Multi-currency margin account can not do cross-margin trading
                    '51129' => '\\ccxt\\InvalidOrder', // The value of the position and buy order has reached the position limit, and no further buying is allowed
                    '51130' => '\\ccxt\\BadSymbol', // Fixed margin currency error
                    '51131' => '\\ccxt\\InsufficientFunds', // Insufficient balance
                    '51132' => '\\ccxt\\InvalidOrder', // Your position amount is negative and less than the minimum trading amount
                    '51133' => '\\ccxt\\InvalidOrder', // Reduce-only feature is unavailable for the spot transactions by multi-currency margin account
                    '51134' => '\\ccxt\\InvalidOrder', // Closing failed. Please check your holdings and pending orders
                    '51135' => '\\ccxt\\InvalidOrder', // Your closing price has triggered the limit price, and the max buy price is {0}
                    '51136' => '\\ccxt\\InvalidOrder', // Your closing price has triggered the limit price, and the min sell price is {0}
                    '51137' => '\\ccxt\\InvalidOrder', // Your opening price has triggered the limit price, and the max buy price is {0}
                    '51138' => '\\ccxt\\InvalidOrder', // Your opening price has triggered the limit price, and the min sell price is {0}
                    '51139' => '\\ccxt\\InvalidOrder', // Reduce-only feature is unavailable for the spot transactions by simple account
                    '51201' => '\\ccxt\\InvalidOrder', // Value of per market order cannot exceed 100,000 USDT
                    '51202' => '\\ccxt\\InvalidOrder', // Market - order amount exceeds the max amount
                    '51203' => '\\ccxt\\InvalidOrder', // Order amount exceeds the limit {0}
                    '51204' => '\\ccxt\\InvalidOrder', // The price for the limit order can not be empty
                    '51205' => '\\ccxt\\InvalidOrder', // Reduce-Only is not available
                    '51250' => '\\ccxt\\InvalidOrder', // Algo order price is out of the available range
                    '51251' => '\\ccxt\\InvalidOrder', // Algo order type error (when user place an iceberg order)
                    '51252' => '\\ccxt\\InvalidOrder', // Algo order price is out of the available range
                    '51253' => '\\ccxt\\InvalidOrder', // Average amount exceeds the limit of per iceberg order
                    '51254' => '\\ccxt\\InvalidOrder', // Iceberg average amount error (when user place an iceberg order)
                    '51255' => '\\ccxt\\InvalidOrder', // Limit of per iceberg order => Total amount/1000 < x <= Total amount
                    '51256' => '\\ccxt\\InvalidOrder', // Iceberg order price variance error
                    '51257' => '\\ccxt\\InvalidOrder', // Trail order callback rate error
                    '51258' => '\\ccxt\\InvalidOrder', // Trail - order placement failed. The trigger price of a sell order should be higher than the last transaction price
                    '51259' => '\\ccxt\\InvalidOrder', // Trail - order placement failed. The trigger price of a buy order should be lower than the last transaction price
                    '51260' => '\\ccxt\\InvalidOrder', // Maximum {0} pending trail - orders can be held at the same time
                    '51261' => '\\ccxt\\InvalidOrder', // Each user can hold up to {0} pending stop - orders at the same time
                    '51262' => '\\ccxt\\InvalidOrder', // Maximum {0} pending iceberg orders can be held at the same time
                    '51263' => '\\ccxt\\InvalidOrder', // Maximum {0} pending time-weighted orders can be held at the same time
                    '51264' => '\\ccxt\\InvalidOrder', // Average amount exceeds the limit of per time-weighted order
                    '51265' => '\\ccxt\\InvalidOrder', // Time-weighted order limit error
                    '51267' => '\\ccxt\\InvalidOrder', // Time-weighted order strategy initiative rate error
                    '51268' => '\\ccxt\\InvalidOrder', // Time-weighted order strategy initiative range error
                    '51269' => '\\ccxt\\InvalidOrder', // Time-weighted order interval error, the interval should be {0}<= x<={1}
                    '51270' => '\\ccxt\\InvalidOrder', // The limit of time-weighted order price variance is 0 < x <= 1%
                    '51271' => '\\ccxt\\InvalidOrder', // Sweep ratio should be 0 < x <= 100%
                    '51272' => '\\ccxt\\InvalidOrder', // Price variance should be 0 < x <= 1%
                    '51273' => '\\ccxt\\InvalidOrder', // Total amount should be more than {0}
                    '51274' => '\\ccxt\\InvalidOrder', // Total quantity of time-weighted order must be larger than single order limit
                    '51275' => '\\ccxt\\InvalidOrder', // The amount of single stop-market order can not exceed the upper limit
                    '51276' => '\\ccxt\\InvalidOrder', // Stop - Market orders cannot specify a price
                    '51277' => '\\ccxt\\InvalidOrder', // TP trigger price can not be higher than the last price
                    '51278' => '\\ccxt\\InvalidOrder', // SL trigger price can not be lower than the last price
                    '51279' => '\\ccxt\\InvalidOrder', // TP trigger price can not be lower than the last price
                    '51280' => '\\ccxt\\InvalidOrder', // SL trigger price can not be higher than the last price
                    '51400' => '\\ccxt\\OrderNotFound', // Cancellation failed as the order does not exist
                    '51401' => '\\ccxt\\OrderNotFound', // Cancellation failed as the order is already canceled
                    '51402' => '\\ccxt\\OrderNotFound', // Cancellation failed as the order is already completed
                    '51403' => '\\ccxt\\InvalidOrder', // Cancellation failed as the order type does not support cancellation
                    '51404' => '\\ccxt\\InvalidOrder', // Order cancellation unavailable during the second phase of call auction
                    '51405' => '\\ccxt\\ExchangeError', // Cancellation failed as you do not have any pending orders
                    '51406' => '\\ccxt\\ExchangeError', // Canceled - order count exceeds the limit {0}
                    '51407' => '\\ccxt\\BadRequest', // Either order ID or client order ID is required
                    '51408' => '\\ccxt\\ExchangeError', // Pair ID or name does not match the order info
                    '51409' => '\\ccxt\\ExchangeError', // Either pair ID or pair name ID is required
                    '51410' => '\\ccxt\\ExchangeError', // Cancellation failed as the order is already under cancelling status
                    '51500' => '\\ccxt\\ExchangeError', // Either order price or amount is required
                    '51501' => '\\ccxt\\ExchangeError', // Maximum {0} orders can be modified
                    '51502' => '\\ccxt\\InsufficientFunds', // Order modification failed for insufficient margin
                    '51503' => '\\ccxt\\ExchangeError', // Order modification failed as the order does not exist
                    '51506' => '\\ccxt\\ExchangeError', // Order modification unavailable for the order type
                    '51508' => '\\ccxt\\ExchangeError', // Orders are not allowed to be modified during the call auction
                    '51509' => '\\ccxt\\ExchangeError', // Modification failed as the order has been canceled
                    '51510' => '\\ccxt\\ExchangeError', // Modification failed as the order has been completed
                    '51511' => '\\ccxt\\ExchangeError', // Modification failed as the order price did not meet the requirement for Post Only
                    '51600' => '\\ccxt\\ExchangeError', // Status not found
                    '51601' => '\\ccxt\\ExchangeError', // Order status and order ID cannot exist at the same time
                    '51602' => '\\ccxt\\ExchangeError', // Either order status or order ID is required
                    '51603' => '\\ccxt\\OrderNotFound', // Order does not exist
                    // Data class
                    '52000' => '\\ccxt\\ExchangeError', // No updates
                    // SPOT/MARGIN error codes 54000-54999
                    '54000' => '\\ccxt\\ExchangeError', // Margin transactions unavailable
                    '54001' => '\\ccxt\\ExchangeError', // Only Multi-currency margin account can be set to borrow coins automatically
                    // FUNDING error codes 58000-58999
                    '58000' => '\\ccxt\\ExchangeError', // Account type {0} does not supported when getting the sub-account balance
                    '58001' => '\\ccxt\\AuthenticationError', // Incorrect trade password
                    '58002' => '\\ccxt\\PermissionDenied', // Please activate Savings Account first
                    '58003' => '\\ccxt\\ExchangeError', // Currency type is not supported by Savings Account
                    '58004' => '\\ccxt\\AccountSuspended', // Account blocked (transfer & withdrawal endpoint => either end of the account does not authorize the transfer)
                    '58005' => '\\ccxt\\ExchangeError', // The redeemed amount must be no greater than {0}
                    '58006' => '\\ccxt\\ExchangeError', // Service unavailable for token {0}
                    '58007' => '\\ccxt\\ExchangeError', // Abnormal Assets interface. Please try again later
                    '58100' => '\\ccxt\\ExchangeError', // The trading product triggers risk control, and the platform has suspended the fund transfer-out function with related users. Please wait patiently
                    '58101' => '\\ccxt\\AccountSuspended', // Transfer suspended (transfer endpoint => either end of the account does not authorize the transfer)
                    '58102' => '\\ccxt\\RateLimitExceeded', // Too frequent transfer (transfer too frequently)
                    '58103' => '\\ccxt\\ExchangeError', // Parent account user id does not match sub-account user id
                    '58104' => '\\ccxt\\ExchangeError', // Since your P2P transaction is abnormal, you are restricted from making fund transfers. Please contact customer support to remove the restriction
                    '58105' => '\\ccxt\\ExchangeError', // Since your P2P transaction is abnormal, you are restricted from making fund transfers. Please transfer funds on our website or app to complete identity verification
                    '58106' => '\\ccxt\\ExchangeError', // Please enable the account for spot contract
                    '58107' => '\\ccxt\\ExchangeError', // Please enable the account for futures contract
                    '58108' => '\\ccxt\\ExchangeError', // Please enable the account for option contract
                    '58109' => '\\ccxt\\ExchangeError', // Please enable the account for swap contract
                    '58110' => '\\ccxt\\ExchangeError', // The contract triggers risk control, and the platform has suspended the fund transfer function of it. Please wait patiently
                    '58111' => '\\ccxt\\ExchangeError', // Funds transfer unavailable as the perpetual contract is charging the funding fee. Please try again later
                    '58112' => '\\ccxt\\ExchangeError', // Your fund transfer failed. Please try again later
                    '58114' => '\\ccxt\\ExchangeError', // Transfer amount must be more than 0
                    '58115' => '\\ccxt\\ExchangeError', // Sub-account does not exist
                    '58116' => '\\ccxt\\ExchangeError', // Transfer amount exceeds the limit
                    '58117' => '\\ccxt\\ExchangeError', // Account assets are abnormal, please deal with negative assets before transferring
                    '58200' => '\\ccxt\\ExchangeError', // Withdrawal from {0} to {1} is unavailable for this currency
                    '58201' => '\\ccxt\\ExchangeError', // Withdrawal amount exceeds the daily limit
                    '58202' => '\\ccxt\\ExchangeError', // The minimum withdrawal amount for NEO is 1, and the amount must be an integer
                    '58203' => '\\ccxt\\InvalidAddress', // Please add a withdrawal address
                    '58204' => '\\ccxt\\AccountSuspended', // Withdrawal suspended
                    '58205' => '\\ccxt\\ExchangeError', // Withdrawal amount exceeds the upper limit
                    '58206' => '\\ccxt\\ExchangeError', // Withdrawal amount is lower than the lower limit
                    '58207' => '\\ccxt\\InvalidAddress', // Withdrawal failed due to address error
                    '58208' => '\\ccxt\\ExchangeError', // Withdrawal failed. Please link your email
                    '58209' => '\\ccxt\\ExchangeError', // Withdrawal failed. Withdraw feature is not available for sub-accounts
                    '58210' => '\\ccxt\\ExchangeError', // Withdrawal fee exceeds the upper limit
                    '58211' => '\\ccxt\\ExchangeError', // Withdrawal fee is lower than the lower limit (withdrawal endpoint => incorrect fee)
                    '58212' => '\\ccxt\\ExchangeError', // Withdrawal fee should be {0}% of the withdrawal amount
                    '58213' => '\\ccxt\\AuthenticationError', // Please set trading password before withdrawal
                    '58300' => '\\ccxt\\ExchangeError', // Deposit-address count exceeds the limit
                    '58350' => '\\ccxt\\InsufficientFunds', // Insufficient balance
                    // Account error codes 59000-59999
                    '59000' => '\\ccxt\\ExchangeError', // Your settings failed as you have positions or open orders
                    '59001' => '\\ccxt\\ExchangeError', // Switching unavailable as you have borrowings
                    '59100' => '\\ccxt\\ExchangeError', // You have open positions. Please cancel all open positions before changing the leverage
                    '59101' => '\\ccxt\\ExchangeError', // You have pending orders with isolated positions. Please cancel all the pending orders and adjust the leverage
                    '59102' => '\\ccxt\\ExchangeError', // Leverage exceeds the maximum leverage. Please adjust the leverage
                    '59103' => '\\ccxt\\InsufficientFunds', // Leverage is too low and no sufficient margin in your account. Please adjust the leverage
                    '59104' => '\\ccxt\\ExchangeError', // The leverage is too high. The borrowed position has exceeded the maximum position of this leverage. Please adjust the leverage
                    '59105' => '\\ccxt\\ExchangeError', // Leverage can not be less than {0}. Please adjust the leverage
                    '59106' => '\\ccxt\\ExchangeError', // The max available margin corresponding to your order tier is {0}. Please adjust your margin and place a new order
                    '59107' => '\\ccxt\\ExchangeError', // You have pending orders under the service, please modify the leverage after canceling all pending orders
                    '59108' => '\\ccxt\\InsufficientFunds', // Low leverage and insufficient margin, please adjust the leverage
                    '59109' => '\\ccxt\\ExchangeError', // Account equity less than the required margin amount after adjustment. Please adjust the leverage
                    '59200' => '\\ccxt\\InsufficientFunds', // Insufficient account balance
                    '59201' => '\\ccxt\\InsufficientFunds', // Negative account balance
                    '59300' => '\\ccxt\\ExchangeError', // Margin call failed. Position does not exist
                    '59301' => '\\ccxt\\ExchangeError', // Margin adjustment failed for exceeding the max limit
                    '59401' => '\\ccxt\\ExchangeError', // Holdings already reached the limit
                    '59500' => '\\ccxt\\ExchangeError', // Only the APIKey of the main account has permission
                    '59501' => '\\ccxt\\ExchangeError', // Only 50 APIKeys can be created per account
                    '59502' => '\\ccxt\\ExchangeError', // Note name cannot be duplicate with the currently created APIKey note name
                    '59503' => '\\ccxt\\ExchangeError', // Each APIKey can bind up to 20 IP addresses
                    '59504' => '\\ccxt\\ExchangeError', // The sub account does not support the withdrawal function
                    '59505' => '\\ccxt\\ExchangeError', // The passphrase format is incorrect
                    '59506' => '\\ccxt\\ExchangeError', // APIKey does not exist
                    '59507' => '\\ccxt\\ExchangeError', // The two accounts involved in a transfer must be two different sub accounts under the same parent account
                    '59508' => '\\ccxt\\AccountSuspended', // The sub account of {0} is suspended
                    // WebSocket error Codes from 60000-63999
                    '60001' => '\\ccxt\\AuthenticationError', // "OK_ACCESS_KEY" can not be empty
                    '60002' => '\\ccxt\\AuthenticationError', // "OK_ACCESS_SIGN" can not be empty
                    '60003' => '\\ccxt\\AuthenticationError', // "OK_ACCESS_PASSPHRASE" can not be empty
                    '60004' => '\\ccxt\\AuthenticationError', // Invalid OK_ACCESS_TIMESTAMP
                    '60005' => '\\ccxt\\AuthenticationError', // Invalid OK_ACCESS_KEY
                    '60006' => '\\ccxt\\InvalidNonce', // Timestamp request expired
                    '60007' => '\\ccxt\\AuthenticationError', // Invalid sign
                    '60008' => '\\ccxt\\AuthenticationError', // Login is not supported for public channels
                    '60009' => '\\ccxt\\AuthenticationError', // Login failed
                    '60010' => '\\ccxt\\AuthenticationError', // Already logged in
                    '60011' => '\\ccxt\\AuthenticationError', // Please log in
                    '60012' => '\\ccxt\\BadRequest', // Illegal request
                    '60013' => '\\ccxt\\BadRequest', // Invalid args
                    '60014' => '\\ccxt\\RateLimitExceeded', // Requests too frequent
                    '60015' => '\\ccxt\\NetworkError', // Connection closed as there was no data transmission in the last 30 seconds
                    '60016' => '\\ccxt\\ExchangeNotAvailable', // Buffer is full, cannot write data
                    '60017' => '\\ccxt\\BadRequest', // Invalid url path
                    '60018' => '\\ccxt\\BadRequest', // The {0} {1} {2} {3} {4} does not exist
                    '60019' => '\\ccxt\\BadRequest', // Invalid op {op}
                    '63999' => '\\ccxt\\ExchangeError', // Internal system error
                ),
                'broad' => array(
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'options' => array(
                'fetchOHLCV' => array(
                    'type' => 'Candles', // Candles or HistoryCandles, IndexCandles, MarkPriceCandles
                ),
                'createMarketBuyOrderRequiresPrice' => true,
                'fetchMarkets' => array( 'spot', 'futures', 'swap', 'option' ), // spot, futures, swap, option
                'defaultType' => 'spot', // 'funding', 'spot', 'margin', 'futures', 'swap', 'option'
                'fetchBalance' => array(
                    'type' => 'spot', // 'funding', 'spot', 'margin', 'futures', 'swap', 'option'
                ),
                'brokerId' => 'e847386590ce4dBC',
                'auth' => array(
                    'time' => 'public',
                    'currencies' => 'private',
                    'instruments' => 'public',
                    'rate' => 'public',
                    '{instrument_id}/constituents' => 'public',
                ),
            ),
            'commonCurrencies' => array(
                // OKEX refers to ERC20 version of Aeternity (AEToken)
                'AE' => 'AET', // https://github.com/ccxt/ccxt/issues/4981
                'BOX' => 'DefiBox',
                'HOT' => 'Hydro Protocol',
                'HSR' => 'HC',
                'MAG' => 'Maggie',
                'SBTC' => 'Super Bitcoin',
                'YOYO' => 'YOYOW',
                'WIN' => 'WinToken', // https://github.com/ccxt/ccxt/issues/5701
            ),
        ));
    }

    public function fetch_status($params = array ()) {
        $response = $this->publicGetSystemStatus ($params);
        //
        //     {
        //         "code":"0",
        //         "$data":array(
        //             array(
        //                 "begin":"1621328400000",
        //                 "end":"1621329000000",
        //                 "href":"https://www.okex.com/support/hc/en-us/articles/360060882172",
        //                 "scheDesc":"",
        //                 "serviceType":"1", // 0 WebSocket, 1 Spot/Margin, 2 Futures, 3 Perpetual, 4 Options, 5 Trading service
        //                 "$state":"scheduled", // ongoing, completed, canceled
        //                 "system":"classic", // classic, unified
        //                 "title":"Classic Spot System Upgrade"
        //             ),
        //         ),
        //         "msg":""
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $timestamp = $this->milliseconds();
        $update = array(
            'info' => $response,
            'updated' => $timestamp,
            'status' => 'ok',
            'eta' => null,
        );
        for ($i = 0; $i < count($data); $i++) {
            $event = $data[$i];
            $state = $this->safe_string($event, 'state');
            if ($state === 'ongoing') {
                $update['eta'] = $this->safe_integer($event, 'end');
                $update['status'] = 'maintenance';
            }
        }
        $this->status = array_merge($this->status, $update);
        return $this->status;
    }

    public function fetch_time($params = array ()) {
        $response = $this->publicGetPublicTime ($params);
        //
        //     {
        //         "code":"0",
        //         "$data":array(
        //             array("ts":"1621247923668")
        //         ),
        //         "msg":""
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $first = $this->safe_value($data, 0, array());
        return $this->safe_integer($first, 'ts');
    }

    public function fetch_markets($params = array ()) {
        $types = $this->safe_value($this->options, 'fetchMarkets');
        $result = array();
        for ($i = 0; $i < count($types); $i++) {
            $markets = $this->fetch_markets_by_type($types[$i], $params);
            $result = $this->array_concat($result, $markets);
        }
        return $result;
    }

    public function parse_markets($markets) {
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $result[] = $this->parse_market($markets[$i]);
        }
        return $result;
    }

    public function parse_market($market) {
        //
        //     {
        //         "alias":"", // this_week, next_week, quarter, next_quarter
        //         "baseCcy":"BTC",
        //         "category":"1",
        //         "ctMult":"",
        //         "ctType":"", // inverse, linear
        //         "ctVal":"",
        //         "ctValCcy":"",
        //         "expTime":"",
        //         "instId":"BTC-USDT", // BTC-USD-210521, CSPR-USDT-SWAP, BTC-USD-210517-44000-C
        //         "instType":"SPOT", // SPOT, FUTURES, SWAP, OPTION
        //         "lever":"10",
        //         "listTime":"1548133413000",
        //         "lotSz":"0.00000001",
        //         "minSz":"0.00001",
        //         "optType":"",
        //         "quoteCcy":"USDT",
        //         "settleCcy":"",
        //         "state":"live",
        //         "stk":"",
        //         "tickSz":"0.1",
        //         "uly":""
        //     }
        //
        $id = $this->safe_string($market, 'instId');
        $type = $this->safe_string_lower($market, 'instType');
        $spot = ($type === 'spot');
        $futures = ($type === 'futures');
        $swap = ($type === 'swap');
        $option = ($type === 'option');
        $baseId = $this->safe_string($market, 'baseCcy');
        $quoteId = $this->safe_string($market, 'quoteCcy');
        $underlying = $this->safe_string($market, 'uly');
        if (($underlying !== null) && !$spot) {
            $parts = explode('-', $underlying);
            $baseId = $this->safe_string($parts, 0);
            $quoteId = $this->safe_string($parts, 1);
        }
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $symbol = $spot ? ($base . '/' . $quote) : $id;
        $tickSize = $this->safe_string($market, 'tickSz');
        $precision = array(
            'amount' => $this->safe_number($market, 'lotSz'),
            'price' => $this->parse_number($tickSize),
        );
        $minAmountString = $this->safe_string($market, 'minSz');
        $minAmount = $this->parse_number($minAmountString);
        $minCost = null;
        if (($minAmount !== null) && ($tickSize !== null)) {
            $minCost = $this->parse_number(Precise::string_mul($tickSize, $minAmountString));
        }
        $active = true;
        $fees = $this->safe_value_2($this->fees, $type, 'trading', array());
        return array_merge($fees, array(
            'id' => $id,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'info' => $market,
            'type' => $type,
            'spot' => $spot,
            'futures' => $futures,
            'swap' => $swap,
            'option' => $option,
            'active' => $active,
            'precision' => $precision,
            'limits' => array(
                'amount' => array(
                    'min' => $minAmount,
                    'max' => null,
                ),
                'price' => array(
                    'min' => $precision['price'],
                    'max' => null,
                ),
                'cost' => array(
                    'min' => $minCost,
                    'max' => null,
                ),
            ),
        ));
    }

    public function fetch_markets_by_type($type, $params = array ()) {
        $uppercaseType = strtoupper($type);
        $request = array(
            'instType' => $uppercaseType,
        );
        if ($uppercaseType === 'OPTION') {
            $defaultUnderlying = $this->safe_value($this->options, 'defaultUnderlying', 'BTC-USD');
            $currencyId = $this->safe_string_2($params, 'uly', 'marketId', $defaultUnderlying);
            if ($currencyId === null) {
                throw new ArgumentsRequired($this->id . ' fetchMarketsByType requires an underlying uly or marketId parameter for options markets');
            } else {
                $request['uly'] = $currencyId;
            }
        }
        $response = $this->publicGetPublicInstruments (array_merge($request, $params));
        //
        // spot, futures, swaps, options
        //
        //     {
        //         "code":"0",
        //         "$data":array(
        //             {
        //                 "alias":"", // this_week, next_week, quarter, next_quarter
        //                 "baseCcy":"BTC",
        //                 "category":"1",
        //                 "ctMult":"",
        //                 "ctType":"", // inverse, linear
        //                 "ctVal":"",
        //                 "ctValCcy":"",
        //                 "expTime":"",
        //                 "instId":"BTC-USDT", // BTC-USD-210521, CSPR-USDT-SWAP, BTC-USD-210517-44000-C
        //                 "instType":"SPOT", // SPOT, FUTURES, SWAP, OPTION
        //                 "lever":"10",
        //                 "listTime":"1548133413000",
        //                 "lotSz":"0.00000001",
        //                 "minSz":"0.00001",
        //                 "optType":"",
        //                 "quoteCcy":"USDT",
        //                 "settleCcy":"",
        //                 "state":"live",
        //                 "stk":"",
        //                 "tickSz":"0.1",
        //                 "uly":""
        //             }
        //         ),
        //         "msg":""
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_markets($data);
    }

    public function fetch_currencies($params = array ()) {
        // has['fetchCurrencies'] is currently set to false
        // it will reply with array("msg":"Request header “OK_ACCESS_KEY“ can't be empty.","$code":"50103")
        // if you attempt to access it without authentication
        $response = $this->privateGetAssetCurrencies ($params);
        //
        //     {
        //         "$code":"0",
        //         "$data":array(
        //             {
        //                 "canDep":true,
        //                 "$canInternal":true,
        //                 "canWd":true,
        //                 "ccy":"USDT",
        //                 "chain":"USDT-ERC20",
        //                 "maxFee":"40",
        //                 "minFee":"20",
        //                 "minWd":"2",
        //                 "$name":""
        //             }
        //         ),
        //         "msg":""
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array();
        $dataByCurrencyId = $this->group_by($data, 'ccy');
        $currencyIds = is_array($dataByCurrencyId) ? array_keys($dataByCurrencyId) : array();
        for ($i = 0; $i < count($currencyIds); $i++) {
            $currencyId = $currencyIds[$i];
            $chains = $dataByCurrencyId[$currencyId];
            $first = $this->safe_value($chains, 0);
            $id = $this->safe_string($first, 'ccy');
            $code = $this->safe_currency_code($id);
            $precision = 0.00000001; // default $precision, todo => fix "magic constants"
            $name = $this->safe_string($first, 'name');
            if (($name !== null) && (strlen($name) < 1)) {
                $name = null;
            }
            $canDeposit = $this->safe_value($first, 'canDep');
            $canWithdraw = $this->safe_value($first, 'canWd');
            $canInternal = $this->safe_value($first, 'canInternal');
            $active = ($canDeposit && $canWithdraw && $canInternal) ? true : false;
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'info' => $chains,
                'type' => null,
                'name' => $name,
                'active' => $active,
                'fee' => $this->safe_number($first, 'minFee'),
                'precision' => $precision,
                'limits' => array(
                    'amount' => array( 'min' => null, 'max' => null ),
                    'withdraw' => array(
                        'min' => $this->safe_number($first, 'ccy'),
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instId' => $market['id'],
        );
        $limit = ($limit === null) ? 20 : $limit;
        if ($limit !== null) {
            $request['sz'] = $limit; // max 400
        }
        $response = $this->publicGetMarketBooks (array_merge($request, $params));
        //
        //     {
        //         "code":"0",
        //         "msg":"",
        //         "$data":[
        //             {
        //                 "asks":[
        //                     ["0.07228","4.211619","0","2"], // price, amount, liquidated orders, total open orders
        //                     ["0.0723","299.880364","0","2"],
        //                     ["0.07231","3.72832","0","1"],
        //                 ],
        //                 "bids":[
        //                     ["0.07221","18.5","0","1"],
        //                     ["0.0722","18.5","0","1"],
        //                     ["0.07219","0.505407","0","1"],
        //                 ],
        //                 "ts":"1621438475342"
        //             }
        //         ]
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $first = $this->safe_value($data, 0, array());
        $timestamp = $this->safe_integer($first, 'ts');
        return $this->parse_order_book($first, $symbol, $timestamp);
    }

    public function parse_ticker($ticker, $market = null) {
        //
        //     {
        //         "instType":"SPOT",
        //         "instId":"ETH-BTC",
        //         "$last":"0.07319",
        //         "lastSz":"0.044378",
        //         "askPx":"0.07322",
        //         "askSz":"4.2",
        //         "bidPx":"0.0732",
        //         "bidSz":"6.050058",
        //         "open24h":"0.07801",
        //         "high24h":"0.07975",
        //         "low24h":"0.06019",
        //         "volCcy24h":"11788.887619",
        //         "vol24h":"167493.829229",
        //         "ts":"1621440583784",
        //         "sodUtc0":"0.07872",
        //         "sodUtc8":"0.07345"
        //     }
        //
        $timestamp = $this->safe_integer($ticker, 'ts');
        $marketId = $this->safe_string($ticker, 'instId');
        $market = $this->safe_market($marketId, $market, '-');
        $symbol = $market['symbol'];
        $last = $this->safe_number($ticker, 'last');
        $open = $this->safe_number($ticker, 'open24h');
        $quoteVolume = $this->safe_number($ticker, 'volCcy24h');
        $baseVolume = $this->safe_number($ticker, 'vol24h');
        $vwap = $this->vwap($baseVolume, $quoteVolume);
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_number($ticker, 'high24h'),
            'low' => $this->safe_number($ticker, 'low24h'),
            'bid' => $this->safe_number($ticker, 'bidPx'),
            'bidVolume' => $this->safe_number($ticker, 'bidSz'),
            'ask' => $this->safe_number($ticker, 'askPx'),
            'askVolume' => $this->safe_number($ticker, 'askSz'),
            'vwap' => $vwap,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        );
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instId' => $market['id'],
        );
        $response = $this->publicGetMarketTicker (array_merge($request, $params));
        //
        //     {
        //         "code":"0",
        //         "msg":"",
        //         "$data":array(
        //             {
        //                 "instType":"SPOT",
        //                 "instId":"ETH-BTC",
        //                 "last":"0.07319",
        //                 "lastSz":"0.044378",
        //                 "askPx":"0.07322",
        //                 "askSz":"4.2",
        //                 "bidPx":"0.0732",
        //                 "bidSz":"6.050058",
        //                 "open24h":"0.07801",
        //                 "high24h":"0.07975",
        //                 "low24h":"0.06019",
        //                 "volCcy24h":"11788.887619",
        //                 "vol24h":"167493.829229",
        //                 "ts":"1621440583784",
        //                 "sodUtc0":"0.07872",
        //                 "sodUtc8":"0.07345"
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $first = $this->safe_value($data, 0, array());
        return $this->parse_ticker($first, $market);
    }

    public function fetch_tickers_by_type($type, $symbols = null, $params = array ()) {
        $this->load_markets();
        $uppercaseType = strtoupper($type);
        $request = array(
            'instType' => strtoupper($type),
        );
        if ($uppercaseType === 'OPTION') {
            $defaultUnderlying = $this->safe_value($this->options, 'defaultUnderlying', 'BTC-USD');
            $currencyId = $this->safe_string_2($params, 'uly', 'marketId', $defaultUnderlying);
            if ($currencyId === null) {
                throw new ArgumentsRequired($this->id . ' fetchTickersByType requires an underlying uly or marketId parameter for options markets');
            } else {
                $request['uly'] = $currencyId;
            }
        }
        $response = $this->publicGetMarketTickers (array_merge($request, $params));
        //
        //     {
        //         "code":"0",
        //         "msg":"",
        //         "data":array(
        //             array(
        //                 "instType":"SPOT",
        //                 "instId":"BCD-BTC",
        //                 "last":"0.0000769",
        //                 "lastSz":"5.4788",
        //                 "askPx":"0.0000777",
        //                 "askSz":"3.2197",
        //                 "bidPx":"0.0000757",
        //                 "bidSz":"4.7509",
        //                 "open24h":"0.0000885",
        //                 "high24h":"0.0000917",
        //                 "low24h":"0.0000596",
        //                 "volCcy24h":"9.2877",
        //                 "vol24h":"124824.1985",
        //                 "ts":"1621441741434",
        //                 "sodUtc0":"0.0000905",
        //                 "sodUtc8":"0.0000729"
        //             ),
        //         )
        //     }
        //
        $tickers = $this->safe_value($response, 'data', array());
        return $this->parse_tickers($tickers, $symbols);
    }

    public function fetch_tickers($symbols = null, $params = array ()) {
        $defaultType = $this->safe_string_2($this->options, 'fetchTickers', 'defaultType');
        $type = $this->safe_string($params, 'type', $defaultType);
        return $this->fetch_tickers_by_type($type, $symbols, $this->omit($params, 'type'));
    }

    public function parse_trade($trade, $market = null) {
        //
        // public fetchTrades
        //
        //     {
        //         "instId":"ETH-BTC",
        //         "$side":"sell",
        //         "sz":"0.119501",
        //         "px":"0.07065",
        //         "tradeId":"15826757",
        //         "ts":"1621446178316"
        //     }
        //
        // private fetchMyTrades
        //
        //     {
        //         "$side":"buy",
        //         "fillSz":"0.007533",
        //         "fillPx":"2654.98",
        //         "$fee":"-0.000007533",
        //         "ordId":"317321390244397056",
        //         "instType":"SPOT",
        //         "instId":"ETH-USDT",
        //         "clOrdId":"",
        //         "posSide":"net",
        //         "billId":"317321390265368576",
        //         "tag":"0",
        //         "execType":"T",
        //         "tradeId":"107601752",
        //         "feeCcy":"ETH",
        //         "ts":"1621927314985"
        //     }
        //
        $id = $this->safe_string($trade, 'tradeId');
        $marketId = $this->safe_string($trade, 'instId');
        $market = $this->safe_market($marketId, $market, '-');
        $symbol = $market['symbol'];
        $timestamp = $this->safe_integer($trade, 'ts');
        $priceString = $this->safe_string_2($trade, 'fillPx', 'px');
        $amountString = $this->safe_string_2($trade, 'fillSz', 'sz');
        $price = $this->parse_number($priceString);
        $amount = $this->parse_number($amountString);
        $cost = $this->parse_number(Precise::string_mul($priceString, $amountString));
        $side = $this->safe_string($trade, 'side');
        $orderId = $this->safe_string($trade, 'ordId');
        $feeCostString = $this->safe_string($trade, 'fee');
        $fee = null;
        if ($feeCostString !== null) {
            $feeCostSigned = Precise::string_neg($feeCostString);
            $feeCurrencyId = $this->safe_string($trade, 'feeCcy');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $this->parse_number($feeCostSigned),
                'currency' => $feeCurrencyCode,
            );
        }
        $takerOrMaker = $this->safe_string($trade, 'execType');
        if ($takerOrMaker === 'T') {
            $takerOrMaker = 'taker';
        } else if ($takerOrMaker === 'M') {
            $takerOrMaker = 'maker';
        }
        return array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $id,
            'order' => $orderId,
            'type' => null,
            'takerOrMaker' => $takerOrMaker,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        );
    }

    public function fetch_trades($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instId' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100
        }
        $response = $this->publicGetMarketTrades (array_merge($request, $params));
        //
        //     {
        //         "code":"0",
        //         "msg":"",
        //         "$data":array(
        //             array("instId":"ETH-BTC","side":"sell","sz":"0.119501","px":"0.07065","tradeId":"15826757","ts":"1621446178316"),
        //             array("instId":"ETH-BTC","side":"sell","sz":"0.03","px":"0.07068","tradeId":"15826756","ts":"1621446178066"),
        //             array("instId":"ETH-BTC","side":"buy","sz":"0.507","px":"0.07069","tradeId":"15826755","ts":"1621446175085"),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_trades($data, $market, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, $market = null) {
        //
        //     array(
        //         "1621447080000", // timestamp
        //         "0.07073", // open
        //         "0.07073", // high
        //         "0.07064", // low
        //         "0.07064", // close
        //         "12.08863", // base volume
        //         "0.854309" // quote volume
        //     )
        //
        return array(
            $this->safe_integer($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instId' => $market['id'],
            'bar' => $this->timeframes[$timeframe],
        );
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 100
        }
        $options = $this->safe_value($this->options, 'fetchOHLCV', array());
        $defaultType = $this->safe_string($options, 'type', 'Candles'); // Candles or HistoryCandles
        $type = $this->safe_string($params, 'type', $defaultType);
        $params = $this->omit($params, 'type');
        $method = 'publicGetMarket' . $type;
        if ($since !== null) {
            $request['before'] = $since;
        }
        $response = $this->$method (array_merge($request, $params));
        //
        //     {
        //         "code":"0",
        //         "msg":"",
        //         "$data":[
        //             ["1621447080000","0.07073","0.07073","0.07064","0.07064","12.08863","0.854309"],
        //             ["1621447020000","0.0708","0.0709","0.0707","0.07072","58.517435","4.143309"],
        //             ["1621446960000","0.0707","0.07082","0.0707","0.07076","53.850841","3.810921"],
        //         ]
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function fetch_balance($params = array ()) {
        $this->load_markets();
        $defaultType = $this->safe_string_2($this->options, 'defaultType');
        $options = $this->safe_string($this->options, 'fetchBalance', array());
        $type = $this->safe_string($options, 'type', $defaultType);
        $type = $this->safe_string($params, 'type', $type);
        $params = $this->omit($params, 'type');
        $method = null;
        if (($type === 'spot') || ($type === 'trading')) {
            $method = 'privateGetAccountBalance';
        } else if ($type === 'funding') {
            $method = 'privateGetAssetBalances';
        }
        $request = array(
            // 'ccy' => 'BTC,ETH', // comma-separated list of currency ids
        );
        $response = $this->$method (array_merge($request, $params));
        //
        //     {
        //         "$code":"0",
        //         "$data":array(
        //             {
        //                 "adjEq":"",
        //                 "$details":array(
        //                     {
        //                         "availBal":"",
        //                         "$availEq":"28.21006347",
        //                         "cashBal":"28.21006347",
        //                         "ccy":"USDT",
        //                         "crossLiab":"",
        //                         "disEq":"28.2687404020176",
        //                         "$eq":"28.21006347",
        //                         "eqUsd":"28.2687404020176",
        //                         "frozenBal":"0",
        //                         "interest":"",
        //                         "isoEq":"0",
        //                         "isoLiab":"",
        //                         "liab":"",
        //                         "maxLoan":"",
        //                         "mgnRatio":"",
        //                         "notionalLever":"0",
        //                         "ordFrozen":"0",
        //                         "twap":"0",
        //                         "uTime":"1621556539861",
        //                         "upl":"0",
        //                         "uplLiab":""
        //                     }
        //                 ),
        //                 "imr":"",
        //                 "isoEq":"0",
        //                 "mgnRatio":"",
        //                 "mmr":"",
        //                 "notionalUsd":"",
        //                 "ordFroz":"",
        //                 "totalEq":"28.2687404020176",
        //                 "uTime":"1621556553510"
        //             }
        //         ),
        //         "msg":""
        //     }
        //
        //     {
        //         "$code":"0",
        //         "$data":array(
        //             {
        //                 "adjEq":"",
        //                 "$details":array(
        //                     {
        //                         "availBal":"0.049",
        //                         "$availEq":"",
        //                         "cashBal":"0.049",
        //                         "ccy":"BTC",
        //                         "crossLiab":"",
        //                         "disEq":"1918.55678",
        //                         "$eq":"0.049",
        //                         "eqUsd":"1918.55678",
        //                         "frozenBal":"0",
        //                         "interest":"",
        //                         "isoEq":"",
        //                         "isoLiab":"",
        //                         "liab":"",
        //                         "maxLoan":"",
        //                         "mgnRatio":"",
        //                         "notionalLever":"",
        //                         "ordFrozen":"0",
        //                         "twap":"0",
        //                         "uTime":"1621973128591",
        //                         "upl":"",
        //                         "uplLiab":""
        //                     }
        //                 ),
        //                 "imr":"",
        //                 "isoEq":"",
        //                 "mgnRatio":"",
        //                 "mmr":"",
        //                 "notionalUsd":"",
        //                 "ordFroz":"",
        //                 "totalEq":"1918.55678",
        //                 "uTime":"1622045126908"
        //             }
        //         ),
        //         "msg":""
        //     }
        //
        // funding
        //
        //     {
        //         "$code":"0",
        //         "$data":array(
        //             {
        //                 "availBal":"0.00005426",
        //                 "bal":0.0000542600000000,
        //                 "ccy":"BTC",
        //                 "frozenBal":"0"
        //             }
        //         ),
        //         "msg":""
        //     }
        //
        $result = array( 'info' => $response );
        $data = $this->safe_value($response, 'data', array());
        $timestamp = null;
        if ($type === 'funding') {
            for ($i = 0; $i < count($data); $i++) {
                $balance = $data[$i];
                $currencyId = $this->safe_string($balance, 'ccy');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                // it may be incorrect to use total, free and used for swap accounts
                $account['total'] = $this->safe_string($balance, 'bal');
                $account['free'] = $this->safe_string($balance, 'availBal');
                $account['used'] = $this->safe_string($balance, 'frozenBal');
                $result[$code] = $account;
            }
        } else {
            $first = $this->safe_value($data, 0, array());
            $timestamp = $this->safe_integer($first, 'uTime');
            $details = $this->safe_value($first, 'details', array());
            for ($i = 0; $i < count($details); $i++) {
                $balance = $details[$i];
                $currencyId = $this->safe_string($balance, 'ccy');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                // it may be incorrect to use total, free and used for swap accounts
                $eq = $this->safe_string($balance, 'eq');
                $availEq = $this->safe_string($balance, 'availEq');
                if ((strlen($eq) < 1) || (strlen($availEq) < 1)) {
                    $account['free'] = $this->safe_string($balance, 'availBal');
                    $account['used'] = $this->safe_string($balance, 'frozenBal');
                } else {
                    $account['total'] = $eq;
                    $account['free'] = $availEq;
                }
                $result[$code] = $account;
            }
        }
        $result['timestamp'] = $timestamp;
        $result['datetime'] = $this->iso8601($timestamp);
        return $this->parse_balance($result, false);
    }

    public function create_order($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instId' => $market['id'],
            //
            //     Simple:
            //     - SPOT and OPTION buyer => cash
            //
            //     Single-currency margin:
            //     - Isolated MARGIN => isolated
            //     - Cross MARGIN => cross
            //     - Cross SPOT => cash
            //     - Cross FUTURES/SWAP/OPTION => cross
            //     - Isolated FUTURES/SWAP/OPTION => isolated
            //
            //     Multi-currency margin:
            //     - Isolated MARGIN => isolated
            //     - Cross SPOT => cross
            //     - Cross FUTURES/SWAP/OPTION => cross
            //     - Isolated FUTURES/SWAP/OPTION => isolated
            //
            'tdMode' => 'cash', // cash, cross, isolated
            // 'ccy' => currency['id'], // only applicable to cross MARGIN orders in single-currency margin
            // 'clOrdId' => $clientOrderId, // up to 32 characters, must be unique
            // 'tag' => tag, // up to 8 characters
            //
            //     In long/short mode, $side and posSide need to be combined
            //
            //     buy with long means open long
            //     sell with long means close long
            //     sell with short means open short
            //     buy with short means close short
            //
            'side' => $side,
            // 'posSide' => 'long', // long, short, // required in the long/short mode, and can only be long or short
            'ordType' => $type, // $market, limit, post_only, fok, ioc
            //
            //     for SPOT/MARGIN bought and sold at a limit $price, sz refers to the $amount of trading currency
            //     for SPOT/MARGIN bought at a $market $price, sz refers to the $amount of quoted currency
            //     for SPOT/MARGIN sold at a $market $price, sz refers to the $amount of trading currency
            //     for FUTURES/SWAP/OPTION buying and selling, sz refers to the number of contracts
            //
            // 'sz' => $this->amount_to_precision($symbol, $amount),
            // 'px' => $this->price_to_precision($symbol, $price), // limit orders only
            // 'reduceOnly' => false, // MARGIN orders only
        );
        $clientOrderId = $this->safe_string_2($params, 'clOrdId', 'clientOrderId');
        if ($clientOrderId === null) {
            $brokerId = $this->safe_string($this->options, 'brokerId');
            if ($brokerId !== null) {
                $request['clOrdId'] = $brokerId . $this->uuid16();
            }
        } else {
            $request['clOrdId'] = $clientOrderId;
            $params = $this->omit($params, array( 'clOrdId', 'clientOrderId' ));
        }
        if ($type === 'market') {
            // for $market buy it requires the $amount of quote currency to spend
            if ($side === 'buy') {
                $notional = $this->safe_number($params, 'sz');
                $createMarketBuyOrderRequiresPrice = $this->safe_value($this->options, 'createMarketBuyOrderRequiresPrice', true);
                if ($createMarketBuyOrderRequiresPrice) {
                    if ($price !== null) {
                        if ($notional === null) {
                            $notional = $amount * $price;
                        }
                    } else if ($notional === null) {
                        throw new InvalidOrder($this->id . " createOrder() requires the $price argument with $market buy orders to calculate total $order cost ($amount to spend), where cost = $amount * $price-> Supply a $price argument to createOrder() call if you want the cost to be calculated for you from $price and $amount, or, alternatively, add .options['createMarketBuyOrderRequiresPrice'] = false and supply the total cost value in the 'amount' argument or in the 'sz' extra parameter (the exchange-specific behaviour)");
                    }
                } else {
                    $notional = ($notional === null) ? $amount : $notional;
                }
                $precision = $market['precision']['price'];
                $request['sz'] = $this->decimal_to_precision($notional, TRUNCATE, $precision, $this->precisionMode);
            } else {
                $request['sz'] = $this->amount_to_precision($symbol, $amount);
            }
        } else {
            $request['px'] = $this->price_to_precision($symbol, $price);
            $request['sz'] = $this->amount_to_precision($symbol, $amount);
        }
        $response = $this->privatePostTradeOrder (array_merge($request, $params));
        //
        //     {
        //         "code" => "0",
        //         "msg" => "",
        //         "$data" => array(
        //             {
        //                 "clOrdId" => "oktswap6",
        //                 "ordId" => "312269865356374016",
        //                 "tag" => "",
        //                 "sCode" => "0",
        //                 "sMsg" => ""
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $first = $this->safe_value($data, 0);
        $order = $this->parse_order($first, $market);
        return array_merge($order, array(
            'type' => $type,
            'side' => $side,
        ));
    }

    public function cancel_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instId' => $market['id'],
            // 'ordId' => $id, // either ordId or clOrdId is required
            // 'clOrdId' => $clientOrderId,
        );
        $clientOrderId = $this->safe_string_2($params, 'clOrdId', 'clientOrderId');
        if ($clientOrderId !== null) {
            $request['clOrdId'] = $clientOrderId;
        } else {
            $request['ordId'] = $id;
        }
        $query = $this->omit($params, array( 'clOrdId', 'clientOrderId' ));
        $response = $this->privatePostTradeCancelOrder (array_merge($request, $query));
        // array("code":"0","$data":[array("clOrdId":"","ordId":"317251910906576896","sCode":"0","sMsg":"")],"msg":"")
        $data = $this->safe_value($response, 'data', array());
        $order = $this->safe_value($data, 0);
        return $this->parse_order($order, $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'canceled' => 'canceled',
            'live' => 'open',
            'partially_filled' => 'open',
            'filled' => 'closed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, $market = null) {
        //
        // createOrder
        //
        //     {
        //         "clOrdId" => "oktswap6",
        //         "ordId" => "312269865356374016",
        //         "tag" => "",
        //         "sCode" => "0",
        //         "sMsg" => ""
        //     }
        //
        // fetchOrder, fetchOpenOrders
        //
        //     {
        //         "accFillSz":"0",
        //         "avgPx":"",
        //         "cTime":"1621910749815",
        //         "category":"normal",
        //         "ccy":"",
        //         "clOrdId":"",
        //         "$fee":"0",
        //         "feeCcy":"ETH",
        //         "fillPx":"",
        //         "fillSz":"0",
        //         "fillTime":"",
        //         "instId":"ETH-USDT",
        //         "instType":"SPOT",
        //         "lever":"",
        //         "ordId":"317251910906576896",
        //         "ordType":"limit",
        //         "pnl":"0",
        //         "posSide":"net",
        //         "px":"2000",
        //         "rebate":"0",
        //         "rebateCcy":"USDT",
        //         "$side":"buy",
        //         "slOrdPx":"",
        //         "slTriggerPx":"",
        //         "state":"live",
        //         "sz":"0.001",
        //         "tag":"",
        //         "tdMode":"cash",
        //         "tpOrdPx":"",
        //         "tpTriggerPx":"",
        //         "tradeId":"",
        //         "uTime":"1621910749815"
        //     }
        //
        $id = $this->safe_string($order, 'ordId');
        $timestamp = $this->safe_integer($order, 'cTime');
        $lastTradeTimestamp = $this->safe_integer($order, 'fillTime');
        $side = $this->safe_string($order, 'side');
        $type = $this->safe_string($order, 'ordType');
        $postOnly = null;
        $timeInForce = null;
        if ($type === 'post_only') {
            $postOnly = true;
            $type = 'limit';
        } else if ($type === 'fok') {
            $timeInForce = 'FOK';
            $type = 'limit';
        } else if ($type === 'ioc') {
            $timeInForce = 'IOC';
            $type = 'limit';
        }
        $marketId = $this->safe_string($order, 'instId');
        $symbol = $this->safe_symbol($marketId, $market, '-');
        $amount = $this->safe_number($order, 'sz');
        $filled = $this->safe_number($order, 'accFillSz');
        $price = $this->safe_number_2($order, 'px', 'slOrdPx');
        $average = $this->safe_number($order, 'avgPx');
        $status = $this->parse_order_status($this->safe_string($order, 'state'));
        $feeCostString = $this->safe_string($order, 'fee');
        $fee = null;
        if ($feeCostString !== null) {
            $feeCostSigned = Precise::string_neg($feeCostString);
            $feeCurrencyId = $this->safe_string($order, 'feeCcy');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $this->parse_number($feeCostSigned),
                'currency' => $feeCurrencyCode,
            );
        }
        $clientOrderId = $this->safe_string($order, 'clOrdId');
        if (($clientOrderId !== null) && (strlen($clientOrderId) < 1)) {
            $clientOrderId = null; // fix empty $clientOrderId string
        }
        $stopPrice = $this->safe_number($order, 'slTriggerPx');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $this->iso8601($lastTradeTimestamp),
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'side' => $side,
            'price' => $price,
            'stopPrice' => $stopPrice,
            'average' => $average,
            'cost' => null,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => $fee,
            'trades' => null,
        ));
    }

    public function fetch_order($id, $symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'instId' => $market['id'],
            // 'clOrdId' => 'abcdef12345', // optional, [a-z0-9]array(1,32)
            // 'ordId' => $id,
        );
        $clientOrderId = $this->safe_string_2($params, 'clOrdId', 'clientOrderId');
        if ($clientOrderId !== null) {
            $request['clOrdId'] = $clientOrderId;
        } else {
            $request['ordId'] = $id;
        }
        $query = $this->omit($params, array( 'clOrdId', 'clientOrderId' ));
        $response = $this->privateGetTradeOrder (array_merge($request, $query));
        //
        //     {
        //         "code":"0",
        //         "$data":array(
        //             {
        //                 "accFillSz":"0",
        //                 "avgPx":"",
        //                 "cTime":"1621910749815",
        //                 "category":"normal",
        //                 "ccy":"",
        //                 "clOrdId":"",
        //                 "fee":"0",
        //                 "feeCcy":"ETH",
        //                 "fillPx":"",
        //                 "fillSz":"0",
        //                 "fillTime":"",
        //                 "instId":"ETH-USDT",
        //                 "instType":"SPOT",
        //                 "lever":"",
        //                 "ordId":"317251910906576896",
        //                 "ordType":"limit",
        //                 "pnl":"0",
        //                 "posSide":"net",
        //                 "px":"2000",
        //                 "rebate":"0",
        //                 "rebateCcy":"USDT",
        //                 "side":"buy",
        //                 "slOrdPx":"",
        //                 "slTriggerPx":"",
        //                 "state":"live",
        //                 "sz":"0.001",
        //                 "tag":"",
        //                 "tdMode":"cash",
        //                 "tpOrdPx":"",
        //                 "tpTriggerPx":"",
        //                 "tradeId":"",
        //                 "uTime":"1621910749815"
        //             }
        //         ),
        //         "msg":""
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $order = $this->safe_value($data, 0);
        return $this->parse_order($order, $market);
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            // 'instType' => 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
            // 'uly' => currency['id'],
            // 'instId' => $market['id'],
            // 'ordType' => 'limit', // $market, $limit, post_only, fok, ioc, comma-separated
            // 'state' => 'live', // live, partially_filled
            // 'after' => orderId,
            // 'before' => orderId,
            // 'limit' => $limit, // default 100, max 100
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['instId'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 100
        }
        $response = $this->privateGetTradeOrdersPending (array_merge($request, $params));
        //
        //     {
        //         "code":"0",
        //         "$data":array(
        //             {
        //                 "accFillSz":"0",
        //                 "avgPx":"",
        //                 "cTime":"1621910749815",
        //                 "category":"normal",
        //                 "ccy":"",
        //                 "clOrdId":"",
        //                 "fee":"0",
        //                 "feeCcy":"ETH",
        //                 "fillPx":"",
        //                 "fillSz":"0",
        //                 "fillTime":"",
        //                 "instId":"ETH-USDT",
        //                 "instType":"SPOT",
        //                 "lever":"",
        //                 "ordId":"317251910906576896",
        //                 "ordType":"$limit",
        //                 "pnl":"0",
        //                 "posSide":"net",
        //                 "px":"2000",
        //                 "rebate":"0",
        //                 "rebateCcy":"USDT",
        //                 "side":"buy",
        //                 "slOrdPx":"",
        //                 "slTriggerPx":"",
        //                 "state":"live",
        //                 "sz":"0.001",
        //                 "tag":"",
        //                 "tdMode":"cash",
        //                 "tpOrdPx":"",
        //                 "tpTriggerPx":"",
        //                 "tradeId":"",
        //                 "uTime":"1621910749815"
        //             }
        //         ),
        //         "msg":""
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_orders($data, $market, $since, $limit);
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $defaultType = $this->safe_string($this->options, 'defaultType');
        $options = $this->safe_string($this->options, 'fetchClosedOrders', array());
        $type = $this->safe_string($options, 'type', $defaultType);
        $type = $this->safe_string($params, 'type', $type);
        $params = $this->omit($params, 'type');
        $request = array(
            // 'instType' => strtoupper($type), // SPOT, MARGIN, SWAP, FUTURES, OPTION
            // 'uly' => currency['id'],
            // 'instId' => $market['id'],
            // 'ordType' => 'limit', // $market, $limit, post_only, fok, ioc, comma-separated
            // 'state' => 'filled', // filled, canceled
            // 'after' => orderId,
            // 'before' => orderId,
            // 'limit' => $limit, // default 100, max 100
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            if ($market['futures'] || $market['swap']) {
                $type = $market['type'];
            }
            $request['instId'] = $market['id'];
        }
        $request['instType'] = strtoupper($type);
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 100
        }
        $method = $this->safe_string($options, 'method', 'privateGetTradeOrdersHistory');
        $response = $this->$method (array_merge($request, $params));
        //
        //     {
        //         "code":"0",
        //         "$data":array(
        //             {
        //                 "accFillSz":"0",
        //                 "avgPx":"",
        //                 "cTime":"1621910749815",
        //                 "category":"normal",
        //                 "ccy":"",
        //                 "clOrdId":"",
        //                 "fee":"0",
        //                 "feeCcy":"ETH",
        //                 "fillPx":"",
        //                 "fillSz":"0",
        //                 "fillTime":"",
        //                 "instId":"ETH-USDT",
        //                 "instType":"SPOT",
        //                 "lever":"",
        //                 "ordId":"317251910906576896",
        //                 "ordType":"$limit",
        //                 "pnl":"0",
        //                 "posSide":"net",
        //                 "px":"2000",
        //                 "rebate":"0",
        //                 "rebateCcy":"USDT",
        //                 "side":"buy",
        //                 "slOrdPx":"",
        //                 "slTriggerPx":"",
        //                 "state":"live",
        //                 "sz":"0.001",
        //                 "tag":"",
        //                 "tdMode":"cash",
        //                 "tpOrdPx":"",
        //                 "tpTriggerPx":"",
        //                 "tradeId":"",
        //                 "uTime":"1621910749815"
        //             }
        //         ),
        //         "msg":""
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_orders($data, $market, $since, $limit);
    }

    public function fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array ()) {
        $request = array(
            // 'instType' => 'SPOT', // SPOT, MARGIN, SWAP, FUTURES, OPTION
            // 'uly' => currency['id'],
            // 'instId' => $market['id'],
            // 'ordId' => orderId,
            // 'after' => billId,
            // 'before' => billId,
            // 'limit' => $limit, // default 100, max 100
        );
        $market = null;
        $this->load_markets();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['instId'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 100
        }
        $response = $this->privateGetTradeFills (array_merge($request, $params));
        //
        //     {
        //         "code":"0",
        //         "$data":array(
        //             {
        //                 "side":"buy",
        //                 "fillSz":"0.007533",
        //                 "fillPx":"2654.98",
        //                 "fee":"-0.000007533",
        //                 "ordId":"317321390244397056",
        //                 "instType":"SPOT",
        //                 "instId":"ETH-USDT",
        //                 "clOrdId":"",
        //                 "posSide":"net",
        //                 "billId":"317321390265368576",
        //                 "tag":"0",
        //                 "execType":"T",
        //                 "tradeId":"107601752",
        //                 "feeCcy":"ETH",
        //                 "ts":"1621927314985"
        //             }
        //         ),
        //         "msg":""
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_trades($data, $market, $since, $limit, $params);
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        $request = array(
            // 'instrument_id' => market['id'],
            'ordId' => $id,
            // 'after' => '1', // return the page after the specified page number
            // 'before' => '1', // return the page before the specified page number
            // 'limit' => $limit, // optional, number of results per $request, default = maximum = 100
        );
        return $this->fetch_my_trades($symbol, $since, $limit, array_merge($request, $params));
    }

    public function parse_deposit_address($depositAddress, $currency = null) {
        //
        //     {
        //         "addr" => "okbtothemoon",
        //         "memo" => "971668", // may be missing
        //         "$tag":"52055", // may be missing
        //         "pmtId" => "", // may be missing
        //         "ccy" => "BTC",
        //         "to" => "6", // 1 SPOT, 3 FUTURES, 6 FUNDING, 9 SWAP, 12 OPTION, 18 Unified account
        //         "selected" => true
        //     }
        //
        //     {
        //         "ccy":"usdt-erc20",
        //         "to":"6",
        //         "addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa",
        //         "selected":true
        //     }
        //
        $address = $this->safe_string($depositAddress, 'addr');
        $tag = $this->safe_string_2($depositAddress, 'tag', 'pmtId');
        $tag = $this->safe_string($depositAddress, 'memo', $tag);
        $currencyId = $this->safe_string($depositAddress, 'ccy');
        $code = $this->safe_currency_code($currencyId);
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
            'info' => $depositAddress,
        );
    }

    public function fetch_deposit_address($code, $params = array ()) {
        $this->load_markets();
        $parts = explode('-', $code);
        $currency = $this->currency($parts[0]);
        $request = array(
            'ccy' => $currency['id'],
        );
        $response = $this->privateGetAssetDepositAddress (array_merge($request, $params));
        //
        //     {
        //         "$code" => "0",
        //         "msg" => "",
        //         "$data" => array(
        //             array(
        //                 "addr" => "okbtothemoon",
        //                 "memo" => "971668", // may be missing
        //                 "tag":"52055", // may be missing
        //                 "pmtId" => "", // may be missing
        //                 "ccy" => "BTC",
        //                 "to" => "6", // 1 SPOT, 3 FUTURES, 6 FUNDING, 9 SWAP, 12 OPTION, 18 Unified account
        //                 "selected" => true
        //             ),
        //             // array("ccy":"usdt-erc20","to":"6","addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa","selected":true),
        //             // array("ccy":"usdt-trc20","to":"6","addr":"TRrd5SiSZrfQVRKm4e9SRSbn2LNTYqCjqx","selected":true),
        //             // array("ccy":"usdt_okexchain","to":"6","addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa","selected":true),
        //             // array("ccy":"usdt_kip20","to":"6","addr":"0x696abb81974a8793352cbd33aadcf78eda3cfdfa","selected":true),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $addressesByCode = $this->parse_deposit_addresses($data);
        $address = $this->safe_value($addressesByCode, $code);
        if ($address === null) {
            throw new InvalidAddress($this->id . ' fetchDepositAddress cannot return nonexistent addresses, you should create withdrawal addresses with the exchange website first');
        }
        return $address;
    }

    public function withdraw($code, $amount, $address, $tag = null, $params = array ()) {
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency($code);
        if ($tag !== null) {
            $address = $address . ':' . $tag;
        }
        $fee = $this->safe_string($params, 'fee');
        if ($fee === null) {
            throw new ArgumentsRequired($this->id . " withdraw() requires a `$fee` string parameter, network $transaction $fee must be ≥ 0. Withdrawals to OKCoin or OKEx are $fee-free, please set '0'. Withdrawing to external digital asset $address requires network $transaction $fee->");
        }
        $request = array(
            'ccy' => $currency['id'],
            'toAddr' => $address,
            'dest' => '4', // 2 = OKCoin International, 3 = OKEx 4 = others
            'amt' => $this->number_to_string($amount),
            'fee' => $this->number_to_string($fee), // withdrawals to OKCoin or OKEx are $fee-free, please set 0
        );
        if (is_array($params) && array_key_exists('password', $params)) {
            $request['pwd'] = $params['password'];
        } else if (is_array($params) && array_key_exists('pwd', $params)) {
            $request['pwd'] = $params['pwd'];
        } else if ($this->password) {
            $request['pwd'] = $this->password;
        }
        $query = $this->omit($params, array( 'fee', 'password', 'pwd' ));
        if (!(is_array($request) && array_key_exists('pwd', $request))) {
            throw new ExchangeError($this->id . ' withdraw() requires $this->password set on the exchange instance or a password / pwd parameter');
        }
        $response = $this->privatePostAssetWithdrawal (array_merge($request, $query));
        //
        //     {
        //         "$code" => "0",
        //         "msg" => "",
        //         "$data" => array(
        //             {
        //                 "amt" => "0.1",
        //                 "wdId" => "67485",
        //                 "ccy" => "BTC"
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $transaction = $this->safe_value($data, 0);
        return $this->parse_transaction($transaction, $currency);
    }

    public function fetch_deposits($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            // 'ccy' => $currency['id'],
            // 'state' => 2, // 0 waiting for confirmation, 1 deposit credited, 2 deposit successful
            // 'after' => $since,
            // 'before' $this->milliseconds(),
            // 'limit' => $limit, // default 100, max 100
        );
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['ccy'] = $currency['id'];
        }
        if ($since !== null) {
            $request['after'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 100
        }
        $response = $this->privateGetAssetDepositHistory (array_merge($request, $params));
        //
        //     {
        //         "$code" => "0",
        //         "msg" => "",
        //         "$data" => array(
        //             array(
        //                 "amt" => "0.01044408",
        //                 "txId" => "1915737_3_0_0_asset",
        //                 "ccy" => "BTC",
        //                 "from" => "13801825426",
        //                 "to" => "",
        //                 "ts" => "1597026383085",
        //                 "state" => "2",
        //                 "depId" => "4703879"
        //             ),
        //             array(
        //                 "amt" => "491.6784211",
        //                 "txId" => "1744594_3_184_0_asset",
        //                 "ccy" => "OKB",
        //                 "from" => "",
        //                 "to" => "",
        //                 "ts" => "1597026383085",
        //                 "state" => "2",
        //                 "depId" => "4703809"
        //             ),
        //             {
        //                 "amt" => "223.18782496",
        //                 "txId" => "6d892c669225b1092c780bf0da0c6f912fc7dc8f6b8cc53b003288624c",
        //                 "ccy" => "USDT",
        //                 "from" => "",
        //                 "to" => "39kK4XvgEuM7rX9frgyHoZkWqx4iKu1spD",
        //                 "ts" => "1597026383085",
        //                 "state" => "2",
        //                 "depId" => "4703779"
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_transactions($data, $currency, $since, $limit, $params);
    }

    public function fetch_withdrawals($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            // 'ccy' => $currency['id'],
            // 'state' => 2, // -3 => pending cancel, -2 canceled, -1 failed, 0, pending, 1 sending, 2 sent, 3 awaiting email verification, 4 awaiting manual verification, 5 awaiting identity verification
            // 'after' => $since,
            // 'before' => $this->milliseconds(),
            // 'limit' => $limit, // default 100, max 100
        );
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['ccy'] = $currency['id'];
        }
        if ($since !== null) {
            $request['after'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit; // default 100, max 100
        }
        $response = $this->privateGetAssetWithdrawalHistory (array_merge($request, $params));
        //
        //     {
        //         "$code" => "0",
        //         "msg" => "",
        //         "$data" => array(
        //             array(
        //                 "amt" => "0.094",
        //                 "wdId" => "4703879",
        //                 "fee" => "0.01000000eth",
        //                 "txId" => "0x62477bac6509a04512819bb1455e923a60dea5966c7caeaa0b24eb8fb0432b85",
        //                 "ccy" => "ETH",
        //                 "from" => "13426335357",
        //                 "to" => "0xA41446125D0B5b6785f6898c9D67874D763A1519",
        //                 "ts" => "1597026383085",
        //                 "state" => "2"
        //             ),
        //             {
        //                 "amt" => "0.01",
        //                 "wdId" => "4703879",
        //                 "fee" => "0.00000000btc",
        //                 "txId" => "",
        //                 "ccy" => "BTC",
        //                 "from" => "13426335357",
        //                 "to" => "13426335357",
        //                 "ts" => "1597026383085",
        //                 "state" => "2"
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_transactions($data, $currency, $since, $limit, $params);
    }

    public function parse_transaction_status($status) {
        //
        // deposit $statuses
        //
        //     {
        //         '0' => 'waiting for confirmation',
        //         '1' => 'deposit credited',
        //         '2' => 'deposit successful'
        //     }
        //
        // withdrawal $statuses
        //
        //     {
        //        '-3' => 'pending cancel',
        //        '-2' => 'canceled',
        //        '-1' => 'failed',
        //         '0' => 'pending',
        //         '1' => 'sending',
        //         '2' => 'sent',
        //         '3' => 'awaiting email verification',
        //         '4' => 'awaiting manual verification',
        //         '5' => 'awaiting identity verification'
        //     }
        //
        $statuses = array(
            '-3' => 'pending',
            '-2' => 'canceled',
            '-1' => 'failed',
            '0' => 'pending',
            '1' => 'pending',
            '2' => 'ok',
            '3' => 'pending',
            '4' => 'pending',
            '5' => 'pending',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, $currency = null) {
        //
        // withdraw
        //
        //     {
        //         "amt" => "0.1",
        //         "wdId" => "67485",
        //         "ccy" => "BTC"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "amt" => "0.094",
        //         "wdId" => "4703879",
        //         "fee" => "0.01000000eth",
        //         "txId" => "0x62477bac6509a04512819bb1455e923a60dea5966c7caeaa0b24eb8fb0432b85",
        //         "ccy" => "ETH",
        //         "from" => "13426335357",
        //         "to" => "0xA41446125D0B5b6785f6898c9D67874D763A1519",
        //         'tag' => string,
        //         'pmtId' => string,
        //         'memo' => string,
        //         "ts" => "1597026383085",
        //         "state" => "2"
        //     }
        //
        // fetchDeposits
        //
        //     {
        //         "amt" => "0.01044408",
        //         "txId" => "1915737_3_0_0_asset",
        //         "ccy" => "BTC",
        //         "from" => "13801825426",
        //         "to" => "",
        //         "ts" => "1597026383085",
        //         "state" => "2",
        //         "depId" => "4703879"
        //     }
        //
        $type = null;
        $id = null;
        $withdrawalId = $this->safe_string($transaction, 'wdId');
        $addressFrom = $this->safe_string($transaction, 'from');
        $addressTo = $this->safe_string($transaction, 'to');
        $address = $addressTo;
        $tagTo = $this->safe_string_2($transaction, 'tag', 'memo');
        $tagTo = $this->safe_string_2($transaction, 'pmtId', $tagTo);
        if ($withdrawalId !== null) {
            $type = 'withdrawal';
            $id = $withdrawalId;
        } else {
            // the payment_id will appear on new deposits but appears to be removed from the response after 2 months
            $id = $this->safe_string($transaction, 'depId');
            $type = 'deposit';
        }
        $currencyId = $this->safe_string($transaction, 'ccy');
        $code = $this->safe_currency_code($currencyId);
        $amount = $this->safe_number($transaction, 'amt');
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'state'));
        $txid = $this->safe_string($transaction, 'txId');
        $timestamp = $this->safe_integer($transaction, 'ts');
        $feeCost = null;
        if ($type === 'deposit') {
            $feeCost = 0;
        } else {
            $feeCost = $this->safe_number($transaction, 'fee');
        }
        // todo parse tags
        return array(
            'info' => $transaction,
            'id' => $id,
            'currency' => $code,
            'amount' => $amount,
            'addressFrom' => $addressFrom,
            'addressTo' => $addressTo,
            'address' => $address,
            'tagFrom' => null,
            'tagTo' => $tagTo,
            'tag' => $tagTo,
            'status' => $status,
            'type' => $type,
            'updated' => null,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fee' => array(
                'currency' => $code,
                'cost' => $feeCost,
            ),
        );
    }

    public function fetch_position($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $type = $this->safe_string($params, 'type');
        $params = $this->omit($params, 'type');
        $request = array(
            // instType String No Instrument $type, MARGIN, SWAP, FUTURES, OPTION
            'instId' => $market['id'],
            // posId String No Single position ID or multiple position IDs (no more than 20) separated with comma
        );
        if ($type !== null) {
            $request['instType'] = strtoupper($type);
        }
        $params = $this->omit($params, 'type');
        $response = $this->privateGetAccountPositions ($params);
        //
        //     {
        //         "code" => "0",
        //         "msg" => "",
        //         "$data" => array(
        //             {
        //                 "adl":"1",
        //                 "availPos":"1",
        //                 "avgPx":"2566.31",
        //                 "cTime":"1619507758793",
        //                 "ccy":"ETH",
        //                 "deltaBS":"",
        //                 "deltaPA":"",
        //                 "gammaBS":"",
        //                 "gammaPA":"",
        //                 "imr":"",
        //                 "instId":"ETH-USD-210430",
        //                 "instType":"FUTURES",
        //                 "interest":"0",
        //                 "last":"2566.22",
        //                 "lever":"10",
        //                 "liab":"",
        //                 "liabCcy":"",
        //                 "liqPx":"2352.8496681818233",
        //                 "margin":"0.0003896645377994",
        //                 "mgnMode":"isolated",
        //                 "mgnRatio":"11.731726509588816",
        //                 "mmr":"0.0000311811092368",
        //                 "optVal":"",
        //                 "pTime":"1619507761462",
        //                 "pos":"1",
        //                 "posCcy":"",
        //                 "posId":"307173036051017730",
        //                 "posSide":"long",
        //                 "thetaBS":"",
        //                 "thetaPA":"",
        //                 "tradeId":"109844",
        //                 "uTime":"1619507761462",
        //                 "upl":"-0.0000009932766034",
        //                 "uplRatio":"-0.0025490556801078",
        //                 "vegaBS":"",
        //                 "vegaPA":""
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->safe_value($data, 0);
    }

    public function fetch_positions($symbols = null, $params = array ()) {
        $this->load_markets();
        // $defaultType = $this->safe_string_2($this->options, 'fetchPositions', 'defaultType');
        // $type = $this->safe_string($params, 'type', $defaultType);
        $type = $this->safe_string($params, 'type');
        $params = $this->omit($params, 'type');
        $request = array(
            // instType String No Instrument $type, MARGIN, SWAP, FUTURES, OPTION, instId will be checked against instType when both parameters are passed, and the position information of the instId will be returned.
            // instId String No Instrument ID, e.g. BTC-USD-190927-5000-C
            // posId String No Single position ID or multiple position IDs (no more than 20) separated with comma
        );
        if ($type !== null) {
            $request['instType'] = strtoupper($type);
        }
        $params = $this->omit($params, 'type');
        $response = $this->privateGetAccountPositions ($params);
        //
        //     {
        //         "code" => "0",
        //         "msg" => "",
        //         "data" => array(
        //             {
        //                 "adl":"1",
        //                 "availPos":"1",
        //                 "avgPx":"2566.31",
        //                 "cTime":"1619507758793",
        //                 "ccy":"ETH",
        //                 "deltaBS":"",
        //                 "deltaPA":"",
        //                 "gammaBS":"",
        //                 "gammaPA":"",
        //                 "imr":"",
        //                 "instId":"ETH-USD-210430",
        //                 "instType":"FUTURES",
        //                 "interest":"0",
        //                 "last":"2566.22",
        //                 "lever":"10",
        //                 "liab":"",
        //                 "liabCcy":"",
        //                 "liqPx":"2352.8496681818233",
        //                 "margin":"0.0003896645377994",
        //                 "mgnMode":"isolated",
        //                 "mgnRatio":"11.731726509588816",
        //                 "mmr":"0.0000311811092368",
        //                 "optVal":"",
        //                 "pTime":"1619507761462",
        //                 "pos":"1",
        //                 "posCcy":"",
        //                 "posId":"307173036051017730",
        //                 "posSide":"long",
        //                 "thetaBS":"",
        //                 "thetaPA":"",
        //                 "tradeId":"109844",
        //                 "uTime":"1619507761462",
        //                 "upl":"-0.0000009932766034",
        //                 "uplRatio":"-0.0025490556801078",
        //                 "vegaBS":"",
        //                 "vegaPA":""
        //             }
        //         )
        //     }
        //
        return $this->safe_value($response, 'data', array());
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $isArray = gettype($params) === 'array' && count(array_filter(array_keys($params), 'is_string')) == 0;
        $request = '/api/' . $this->version . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->implode_hostname($this->urls['api']['rest']) . $request;
        // $type = $this->getPathAuthenticationType ($path);
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else if ($api === 'private') {
            $this->check_required_credentials();
            $timestamp = $this->iso8601($this->milliseconds());
            $headers = array(
                'OK-ACCESS-KEY' => $this->apiKey,
                'OK-ACCESS-PASSPHRASE' => $this->password,
                'OK-ACCESS-TIMESTAMP' => $timestamp,
                // 'OK-FROM' => '',
                // 'OK-TO' => '',
                // 'OK-LIMIT' => '',
            );
            $auth = $timestamp . $method . $request;
            if ($method === 'GET') {
                if ($query) {
                    $urlencodedQuery = '?' . $this->urlencode($query);
                    $url .= $urlencodedQuery;
                    $auth .= $urlencodedQuery;
                }
            } else {
                if ($isArray || $query) {
                    $body = $this->json($query);
                    $auth .= $body;
                }
                $headers['Content-Type'] = 'application/json';
            }
            $signature = $this->hmac($this->encode($auth), $this->encode($this->secret), 'sha256', 'base64');
            $headers['OK-ACCESS-SIGN'] = $signature;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (!$response) {
            return; // fallback to default $error handler
        }
        //
        //     array("$code":"1","$data":[array("clOrdId":"","ordId":"","sCode":"51119","sMsg":"Order placement failed due to insufficient balance. ","tag":"")],"msg":"")
        //
        $code = $this->safe_string($response, 'code');
        if ($code !== '0') {
            $feedback = $this->id . ' ' . $body;
            $data = $this->safe_value($response, 'data', array());
            for ($i = 0; $i < count($data); $i++) {
                $error = $data[$i];
                $errorCode = $this->safe_string($error, 'sCode');
                $message = $this->safe_string($error, 'sMsg');
                $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
                $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            }
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
    }
}
